datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String          @id @default(cuid())
  name                   String? //google name
  email                  String?
  emailVerified          DateTime?
  image                  String?
  profileId              String          @default(cuid())
  profilePrivate         Boolean         @default(false)
  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  quests                 Quest[]
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  friends                User[]          @relation("Friends")
  friendOf               User[]          @relation("Friends")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FriendRequest {
  id         String @id @default(cuid())
  sender     User   @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId String
  status     Status @default(pending)
}

enum Status {
  pending
  accepted
  rejected
}

model Quest {
  id            String   @id @default(cuid())
  image         String
  title         String
  content       String
  datePublished DateTime @default(now())
  finished      Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  posts         Post[]
  likes         Like[]
}

model Post {
  id            String    @id @default(cuid())
  image         String
  title         String
  content       String
  datePublished DateTime  @default(now())
  quest         Quest     @relation(fields: [questId], references: [id])
  questId       String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  datePublished DateTime @default(now())
  post          Post     @relation(fields: [postId], references: [id])
  postId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

// TODO: make sure either post or quest is defined
model Like {
  id      String  @id @default(cuid())
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  Quest   Quest?  @relation(fields: [questId], references: [id])
  questId String?
}
