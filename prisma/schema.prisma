datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String
  email                  String?         @unique
  emailVerified          DateTime?
  profilePrivate         Boolean         @default(false)
  bio                    String?
  image                  String? //TODO: required for next-auth remove if possible
  imageUrl               String?
  imageName              String?
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends                User[]          @relation("Friends")
  friendOf               User[]          @relation("Friends")
  accounts               Account[]
  sessions               Session[]
  quests                 Quest[]
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
}

model FriendRequest {
  id         Int  @id @default(autoincrement())
  sender     User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int

  @@unique([senderId, receiverId])
}

model Quest {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  datePublished DateTime @default(now())
  finished      Boolean  @default(false)
  imageUrl      String?
  imageName     String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  posts         Post[]
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  imageUrl      String?
  imageName     String?
  datePublished DateTime  @default(now())
  quest         Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId       Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id            Int      @id @default(autoincrement())
  content       String
  datePublished DateTime @default(now())
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
}

model Like {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
}
